<?xml version="1.0" encoding="UTF-8" ?>
<class name="Node3D" inherits="Node" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Base 3D game object, inherited by all 3D-related nodes.
	</brief_description>
	<description>
		The [Node3D] node is the base representation of a node in 3D space. All other 3D nodes inherit from this class.
		Affine operations (rotate, scale, translate) happen in parent's local coordinate system, unless the [Node3D]'s [member top_level] is [code]true[/code]. Affine operations in this coordinate system correspond to direct affine operations on the [Node3D]'s [member transform]. The word local below refers to this coordinate system. The coordinate system that is attached to the [Node3D] object itself is referred to as object-local coordinate system.
		[b]Note:[/b] Unless otherwise specified, all methods that need angle parameters must receive angles in [i]radians[/i]. To convert degrees to radians, use [method @GlobalScope.deg_to_rad].
		[b]Note:[/b] In Godot 4, "[i]Spatial[/i]" nodes are named "[i]Node3D[/i]". Some parts of the documentation may still mention Godot 3.x's "[i]Spatial[/i]" nodes.
	</description>
	<tutorials>
		<link title="Introduction to 3D">$DOCS_URL/tutorials/3d/introduction_to_3d.html</link>
		<link title="All 3D Demos">https://github.com/godotengine/godot-demo-projects/tree/master/3d</link>
	</tutorials>
	<methods>
		<method name="add_gizmo">
			<return type="void" />
			<param index="0" name="gizmo" type="Node3DGizmo" />
			<description>
				Attaches the given [param gizmo] to this node. Only works in the editor.
				[b]Note:[/b] [param gizmo] should be an [EditorNode3DGizmo]. The argument type is [Node3DGizmo] to avoid depending on editor classes in [Node3D].
			</description>
		</method>
		<method name="clear_gizmos">
			<return type="void" />
			<description>
				Clears all [EditorNode3DGizmo] objects attached to this node. Only works in the editor.
			</description>
		</method>
		<method name="clear_subgizmo_selection">
			<return type="void" />
			<description>
				Deselects all subgizmos for this node. Useful to call when the selected subgizmo may no longer exist after a property change. Only works in the editor.
			</description>
		</method>
		<method name="force_update_transform">
			<return type="void" />
			<description>
				Forces the node's [member transform] to update. Fails if the node is not inside the tree.
				[b]Note:[/b] For performance reasons, transform changes are usually accumulated and applied [i]once[/i] at the end of the frame. The update propagates through [Node3D] children, as well. Therefore, use this method only when you need an up-to-date transform (such as during physics operations).
			</description>
		</method>
		<method name="get_gizmos" qualifiers="const">
			<return type="Node3DGizmo[]" />
			<description>
				Returns all the [EditorNode3DGizmo] objects attached to this node. Only works in the editor.
			</description>
		</method>
		<method name="get_parent_node_3d" qualifiers="const">
			<return type="Node3D" />
			<description>
				Returns the parent [Node3D] that directly affects this node's [member global_transform]. Returns [code]null[/code] if no parent exists, the parent is not a [Node3D], or [member top_level] is [code]true[/code].
				[b]Note:[/b] This method is not always equivalent to [method Node.get_parent], which does not take [member top_level] into account.
			</description>
		</method>
		<method name="get_world_3d" qualifiers="const">
			<return type="World3D" />
			<description>
				Returns the [World3D] this node is registered to.
				Usually, this is the same as this node's viewport (see [method Node.get_viewport] and [method Viewport.find_world_3d]).
			</description>
		</method>
		<method name="global_rotate">
			<return type="void" />
			<param index="0" name="axis" type="Vector3" />
			<param index="1" name="angle" type="float" />
			<description>
				Rotates this node's [member global_transform] around the global [param axis] by the given [param angle], in radians. The operation happens in global space (relative to the world).
			</description>
		</method>
		<method name="global_scale">
			<return type="void" />
			<param index="0" name="scale" type="Vector3" />
			<description>
				Scales this node's [member global_transform] by the given [param scale] factor. The operation happens in global space (relative to the world).
				[b]Note:[/b] This method is not to be confused with the [member scale] property.
			</description>
		</method>
		<method name="global_translate">
			<return type="void" />
			<param index="0" name="offset" type="Vector3" />
			<description>
				Adds the given translation [param offset] to the node's [member global_position] in global space (relative to the world).
			</description>
		</method>
		<method name="hide">
			<return type="void" />
			<description>
				Prevents this node from being rendered. Equivalent to setting [member visible] to [code]false[/code]. This is the opposite of [method show].
			</description>
		</method>
		<method name="is_local_transform_notification_enabled" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the node receives [constant NOTIFICATION_LOCAL_TRANSFORM_CHANGED] whenever [member transform] changes. This is enabled with [method set_notify_local_transform].
			</description>
		</method>
		<method name="is_scale_disabled" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if this node's [member scale] is ignored. See also [method set_disable_scale].
			</description>
		</method>
		<method name="is_transform_notification_enabled" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the node receives [constant NOTIFICATION_TRANSFORM_CHANGED] whenever [member global_transform] changes. This is enabled with [method set_notify_transform].
			</description>
		</method>
		<method name="is_visible_in_tree" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the node's [member visible] property is [code]true[/code] and all its [Node3D] ancestors are also visible. If any ancestor is hidden, this node is not visible and will not be rendered.
			</description>
		</method>
		<method name="look_at">
			<return type="void" />
			<param index="0" name="target" type="Vector3" />
			<param index="1" name="up" type="Vector3" default="Vector3(0, 1, 0)" />
			<param index="2" name="use_model_front" type="bool" default="false" />
			<description>
				Rotates the node so that the local forward axis (-Z, [constant Vector3.FORWARD]) points toward the [param target] position.
				The local up axis (+Y) points as close to the [param up] vector as possible while staying perpendicular to the local forward axis. The resulting transform is orthogonal, and the scale is preserved. Non-uniform scaling may not work correctly.
				The [param target] position cannot be the same as the node's position, the [param up] vector cannot be zero, and the direction from the node's position to the [param target] vector cannot be parallel to the [param up] vector.
				If [param use_model_front] is [code]true[/code], the +Z axis (asset front) is treated as forward (implies +X is left) and points toward the [param target] position. By default, the -Z axis (camera forward) is treated as forward (implies +X is right).
				[b]Note:[/b] Operations take place in global space, which means that the node must be in the scene tree.
			</description>
		</method>
		<method name="look_at_from_position">
			<return type="void" />
			<param index="0" name="position" type="Vector3" />
			<param index="1" name="target" type="Vector3" />
			<param index="2" name="up" type="Vector3" default="Vector3(0, 1, 0)" />
			<param index="3" name="use_model_front" type="bool" default="false" />
			<description>
				Moves the node to the specified [param position], and then rotates the node to point toward the [param target] as per [method look_at]. The operation happens in global space (relative to the world).
			</description>
		</method>
		<method name="orthonormalize">
			<return type="void" />
			<description>
				Orthonormalizes this node's [member basis]. This resets this node's [member scale] to the default, but preserves the [member position] and [member rotation]. See also [method Transform3D.orthonormalized].
			</description>
		</method>
		<method name="rotate">
			<return type="void" />
			<param index="0" name="axis" type="Vector3" />
			<param index="1" name="angle" type="float" />
			<description>
				Rotates this node's local [member transform] around the [param axis] by the given [param angle], in radians. The operation happens in local space (relative to the parent).
			</description>
		</method>
		<method name="rotate_object_local">
			<return type="void" />
			<param index="0" name="axis" type="Vector3" />
			<param index="1" name="angle" type="float" />
			<description>
				Rotates this node's local [member transform] around the [param axis] by the given [param angle], in radians. The operation happens in local space (relative to the parent).
			</description>
		</method>
		<method name="rotate_x">
			<return type="void" />
			<param index="0" name="angle" type="float" />
			<description>
				Rotates this node's local [member transform] around its X axis by the given [param angle], in radians. This changes the pitch.
			</description>
		</method>
		<method name="rotate_y">
			<return type="void" />
			<param index="0" name="angle" type="float" />
			<description>
				Rotates this node's local [member transform] around its Y axis by the given [param angle], in radians. This changes the yaw.
			</description>
		</method>
		<method name="rotate_z">
			<return type="void" />
			<param index="0" name="angle" type="float" />
			<description>
				Rotates this node's local [member transform] around its Z axis by the given [param angle], in radians. This changes the roll.
			</description>
		</method>
		<method name="scale_object_local">
			<return type="void" />
			<param index="0" name="scale" type="Vector3" />
			<description>
				Scales this node's local [member transform] by the given [param scale] factor.
			</description>
		</method>
		<method name="set_disable_scale">
			<return type="void" />
			<param index="0" name="disable" type="bool" />
			<description>
				If [code]true[/code], the node always uses the default scale of [code](1, 1, 1)[/code], regardless of [member scale]'s value.
			</description>
		</method>
		<method name="set_identity">
			<return type="void" />
			<description>
				Sets this node's [member transform] to [constant Transform3D.IDENTITY], resetting all local transformations ([member position], [member rotation], and [member scale]) to the default.
			</description>
		</method>
		<method name="set_ignore_transform_notification">
			<return type="void" />
			<param index="0" name="enabled" type="bool" />
			<description>
				If [code]true[/code], the node will not receive [constant NOTIFICATION_TRANSFORM_CHANGED] or [constant NOTIFICATION_LOCAL_TRANSFORM_CHANGED].
				It may useful to call this method when handling these notifications to prevent infinite recursion.
			</description>
		</method>
		<method name="set_notify_local_transform">
			<return type="void" />
			<param index="0" name="enable" type="bool" />
			<description>
				If [code]true[/code], the node will receive [constant NOTIFICATION_LOCAL_TRANSFORM_CHANGED] whenever [member transform] changes.
				[b]Note:[/b] Some 3D nodes such as [CSGShape3D] or [CollisionShape3D] automatically enable this to function correctly.
			</description>
		</method>
		<method name="set_notify_transform" keywords="set_notify_global_transform">
			<return type="void" />
			<param index="0" name="enable" type="bool" />
			<description>
				If [code]true[/code], the node will receive [constant NOTIFICATION_TRANSFORM_CHANGED] whenever [member global_transform] and [member transform] changes.
				[b]Note:[/b] Most 3D nodes such as [VisualInstance3D] or [CollisionObject3D] automatically enable this to function correctly.
				[b]Note:[/b] In the editor, nodes will propagate this notification to their children if a gizmo is attached (see [method add_gizmo]).
			</description>
		</method>
		<method name="set_subgizmo_selection">
			<return type="void" />
			<param index="0" name="gizmo" type="Node3DGizmo" />
			<param index="1" name="id" type="int" />
			<param index="2" name="transform" type="Transform3D" />
			<description>
				Selects the [param gizmo]'s subgizmo with the given [param id] and sets its transform. Only works in the editor.
				[b]Note:[/b] The gizmo object would typically be an instance of [EditorNode3DGizmo], but the argument type is kept generic to avoid creating a dependency on editor classes in [Node3D].
			</description>
		</method>
		<method name="show">
			<return type="void" />
			<description>
				Allows this node to be rendered. Equivalent to setting [member visible] to [code]true[/code]. This is the opposite of [method hide].
			</description>
		</method>
		<method name="to_global" qualifiers="const">
			<return type="Vector3" />
			<param index="0" name="local_point" type="Vector3" />
			<description>
				Returns the [param local_point] converted from this node's local space to global space. This is the opposite of [method to_local].
			</description>
		</method>
		<method name="to_local" qualifiers="const">
			<return type="Vector3" />
			<param index="0" name="global_point" type="Vector3" />
			<description>
				Returns the [param global_point] converted from global space to this node's local space. This is the opposite of [method to_global].
			</description>
		</method>
		<method name="translate">
			<return type="void" />
			<param index="0" name="offset" type="Vector3" />
			<description>
				Adds the given translation [param offset] to the node's [member position] in local space. Unlike [method translate_object_local], the final translation is multiplied by the node's [member scale].
			</description>
		</method>
		<method name="translate_object_local">
			<return type="void" />
			<param index="0" name="offset" type="Vector3" />
			<description>
				Adds the given translation [param offset] to the node's [member position] in local space.
			</description>
		</method>
		<method name="update_gizmos">
			<return type="void" />
			<description>
				Updates all the [EditorNode3DGizmo] objects attached to this node. Only works in the editor.
			</description>
		</method>
	</methods>
	<members>
		<member name="basis" type="Basis" setter="set_basis" getter="get_basis">
			Basis of the [member transform] property. Represents the rotation, scale, and shear of this node in local space (relative to the parent node).
		</member>
		<member name="global_basis" type="Basis" setter="set_global_basis" getter="get_global_basis">
			Basis of the [member global_transform] property. Represents the rotation, scale, and shear of this node in global space (relative to the world).
		</member>
		<member name="global_position" type="Vector3" setter="set_global_position" getter="get_global_position" keywords="global_translation">
			Global position (translation) of this node in global space (relative to the world). This is equivalent to the [member global_transform]'s [member Transform3D.origin].
		</member>
		<member name="global_rotation" type="Vector3" setter="set_global_rotation" getter="get_global_rotation">
			Global rotation of this node as [url=https://en.wikipedia.org/wiki/Euler_angles]Euler angles[/url], in radians and in global space (relative to the world). This value is obtained from [member global_basis]'s rotation.
			- The [member Vector3.x] is the angle around the global X axis (pitch);
			- The [member Vector3.y] is the angle around the global Y axis (yaw);
			- The [member Vector3.z] is the angle around the global Z axis (roll).
			[b]Note:[/b] Unlike [member rotation], this property always follows the YXZ convention ([constant EULER_ORDER_YXZ]).
		</member>
		<member name="global_rotation_degrees" type="Vector3" setter="set_global_rotation_degrees" getter="get_global_rotation_degrees">
			The [member global_rotation] of this node, in degrees instead of radians.
		</member>
		<member name="global_transform" type="Transform3D" setter="set_global_transform" getter="get_global_transform">
			The transformations of this node in global space (relative to the world). Contains and represents this node's [member global_position], [member global_rotation], and global scale.
			[b]Note:[/b] Getting this property while the node is not inside the tree will fail and return [constant Transform3D.IDENTITY].
		</member>
		<member name="position" type="Vector3" setter="set_position" getter="get_position" default="Vector3(0, 0, 0)" keywords="translation">
			Position (translation) of this node in local space (relative to the parent node). This is equivalent to the [member transform]'s [member Transform3D.origin].
		</member>
		<member name="quaternion" type="Quaternion" setter="set_quaternion" getter="get_quaternion">
			Rotation of this node represented as a [Quaternion] in local space (relative to the parent node). This value is obtained from [member basis]'s rotation.
			[b]Note:[/b] Quaternions are much more suitable for 3D math but are less intuitive. Setting this property can be useful for interpolation (see [method Quaternion.slerp]).
		</member>
		<member name="rotation" type="Vector3" setter="set_rotation" getter="get_rotation" default="Vector3(0, 0, 0)">
			Rotation of this node as [url=https://en.wikipedia.org/wiki/Euler_angles]Euler angles[/url], in radians and in local space (relative to the parent node). This value is obtained from [member basis]'s rotation.
			- The [member Vector3.x] is the angle around the local X axis (pitch);
			- The [member Vector3.y] is the angle around the local Y axis (yaw);
			- The [member Vector3.z] is the angle around the local Z axis (roll).
			The order of each consecutive rotation can be changed with [member rotation_order] (see [enum EulerOrder] constants). By default, the YXZ convention is used ([constant EULER_ORDER_YXZ]): Z (roll) is calculated first, then X (pitch), and lastly Y (yaw).
			[b]Note:[/b] This property is edited in degrees in the inspector. If you want to use degrees in a script, use [member rotation_degrees].
		</member>
		<member name="rotation_degrees" type="Vector3" setter="set_rotation_degrees" getter="get_rotation_degrees">
			The [member rotation] of this node, in degrees instead of radians.
			[b]Note:[/b] This is [b]not[/b] the property available in the Inspector dock.
		</member>
		<member name="rotation_edit_mode" type="int" setter="set_rotation_edit_mode" getter="get_rotation_edit_mode" enum="Node3D.RotationEditMode" default="0">
			How this node's rotation and scale are displayed in the Inspector dock.
		</member>
		<member name="rotation_order" type="int" setter="set_rotation_order" getter="get_rotation_order" enum="EulerOrder" default="2">
			The axis rotation order of the [member rotation] property. The final orientation is calculated by rotating around the X, Y, and Z axis in this order.
		</member>
		<member name="scale" type="Vector3" setter="set_scale" getter="get_scale" default="Vector3(1, 1, 1)">
			Local scale of this node. This value is obtained from [member basis]'s scale.
			[b]Note:[/b] The behavior of some 3D node types is not affected by this property. These include [Light3D], [Camera3D], [AudioStreamPlayer3D], etc.
			[b]Warning:[/b] Mixed negative scales in 3D are not decomposable from the transformation matrix. Due to the way scale is represented with transformation matrices in Godot, the scale values will either be all positive or all negative.
		</member>
		<member name="top_level" type="bool" setter="set_as_top_level" getter="is_set_as_top_level" default="false">
			If [code]true[/code], the node does not inherit its transformations from its parent. As such, node transformations will only be in global space, which also means that [member global_transform] and [member transform] will be identical.
		</member>
		<member name="transform" type="Transform3D" setter="set_transform" getter="get_transform" default="Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)">
			The transformations of this node in local space (relative to the parent node). Contains and represents this node's [member position], [member rotation], and [member scale].
		</member>
		<member name="visibility_parent" type="NodePath" setter="set_visibility_parent" getter="get_visibility_parent" default="NodePath(&quot;&quot;)">
			Path to the visibility range parent for this node and its descendants. The visibility parent must be a [GeometryInstance3D].
			Any visual instance will only be visible if the visibility parent (and all of its visibility ancestors) is hidden by being closer to the camera than its own [member GeometryInstance3D.visibility_range_begin]. Nodes hidden via the [member Node3D.visible] property are essentially removed from the visibility dependency tree, so dependent instances will not take the hidden node or its descendants into account.
		</member>
		<member name="visible" type="bool" setter="set_visible" getter="is_visible" default="true">
			If [code]true[/code], this node can be visible. The node is only rendered when all of its ancestors can be visible, as well. That means [method is_visible_in_tree] must return [code]true[/code].
		</member>
	</members>
	<signals>
		<signal name="visibility_changed">
			<description>
				Emitted when this node's visibility changes (see [member visible] and [method is_visible_in_tree]).
				This signal is emitted [i]after[/i] the related [constant NOTIFICATION_VISIBILITY_CHANGED] notification.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NOTIFICATION_TRANSFORM_CHANGED" value="2000" keywords="NOTIFICATION_GLOBAL_TRANSFORM_CHANGED">
			Notification received when this node's [member global_transform] changes, if [method is_transform_notification_enabled] is [code]true[/code]. See also [method set_notify_transform].
			[b]Note:[/b] Most 3D nodes such as [VisualInstance3D] or [CollisionObject3D] automatically enable this to function correctly.
			[b]Note:[/b] In the editor, nodes will propagate this notification to their children if a gizmo is attached (see [method add_gizmo]).
		</constant>
		<constant name="NOTIFICATION_ENTER_WORLD" value="41">
			Notification received when this node is registered to a new [World3D] (see [method get_world_3d]).
		</constant>
		<constant name="NOTIFICATION_EXIT_WORLD" value="42">
			Notification received when this node is unregistered from the current [World3D] (see [method get_world_3d]).
		</constant>
		<constant name="NOTIFICATION_VISIBILITY_CHANGED" value="43">
			Notification received when this node's visibility changes (see [member visible] and [method is_visible_in_tree]).
			This notification is received [i]before[/i] the related [signal visibility_changed] signal.
		</constant>
		<constant name="NOTIFICATION_LOCAL_TRANSFORM_CHANGED" value="44">
			Notification received when this node's [member transform] changes, if [method is_local_transform_notification_enabled] is [code]true[/code]. This is not received when a parent [Node3D]'s [member transform] changes. See also [method set_notify_local_transform].
			[b]Note:[/b] Some 3D nodes such as [CSGShape3D] or [CollisionShape3D] automatically enable this to function correctly.
		</constant>
		<constant name="ROTATION_EDIT_MODE_EULER" value="0" enum="RotationEditMode">
			The rotation is edited using a [Vector3] in [url=https://en.wikipedia.org/wiki/Euler_angles]Euler angles[/url].
		</constant>
		<constant name="ROTATION_EDIT_MODE_QUATERNION" value="1" enum="RotationEditMode">
			The rotation is edited using a [Quaternion].
		</constant>
		<constant name="ROTATION_EDIT_MODE_BASIS" value="2" enum="RotationEditMode">
			The rotation is edited using a [Basis]. In this mode, the raw [member basis]'s axes can be freely modified, but the [member scale] property is not available.
		</constant>
	</constants>
</class>
